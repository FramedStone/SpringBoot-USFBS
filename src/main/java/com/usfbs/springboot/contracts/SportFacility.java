package com.usfbs.springboot.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.14.0.
 */
@SuppressWarnings("rawtypes")
public class SportFacility extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDANNOUNCEMENT = "addAnnouncement";

    public static final String FUNC_ADDCOURT = "addCourt";

    public static final String FUNC_ADDSPORTFACILITY = "addSportFacility";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_DELETEANNOUNCEMENT = "deleteAnnouncement";

    public static final String FUNC_DELETECOURT = "deleteCourt";

    public static final String FUNC_DELETESPORTFACILITY = "deleteSportFacility";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_GETALLCOURTS = "getAllCourts";

    public static final String FUNC_GETALLCOURTS_ = "getAllCourts_";

    public static final String FUNC_GETALLSPORTFACILITY = "getAllSportFacility";

    public static final String FUNC_GETALLSPORTFACILITY_ = "getAllSportFacility_";

    public static final String FUNC_GETANNOUNCEMENT = "getAnnouncement";

    public static final String FUNC_GETAVAILABLETIMERANGE = "getAvailableTimeRange";

    public static final String FUNC_GETAVAILABLETIMERANGE_ = "getAvailableTimeRange_";

    public static final String FUNC_GETCOURT = "getCourt";

    public static final String FUNC_GETCOURT_ = "getCourt_";

    public static final String FUNC_GETFACILITYLOCATION = "getFacilityLocation";

    public static final String FUNC_UPDATEANNOUNCEMENTIPFSHASH = "updateAnnouncementIpfsHash";

    public static final String FUNC_UPDATEANNOUNCEMENTTIME = "updateAnnouncementTime";

    public static final String FUNC_UPDATECOURTNAME = "updateCourtName";

    public static final String FUNC_UPDATECOURTSTATUS = "updateCourtStatus";

    public static final String FUNC_UPDATECOURTTIME = "updateCourtTime";

    public static final String FUNC_UPDATESPORTFACILITYLOCATION = "updateSportFacilityLocation";

    public static final String FUNC_UPDATESPORTFACILITYNAME = "updateSportFacilityName";

    public static final String FUNC_UPDATESPORTFACILITYSTATUS = "updateSportFacilityStatus";

    public static final Event ANNOUNCEMENTADDED_EVENT = new Event("announcementAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTDELETED_EVENT = new Event("announcementDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTIPFSHASHMODIFIED_EVENT = new Event("announcementIpfsHashModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTREQUESTED_EVENT = new Event("announcementRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTTIMEMODIFIED_EVENT = new Event("announcementTimeModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COURTADDED_EVENT = new Event("courtAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COURTDELETED_EVENT = new Event("courtDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COURTDETAILSREQUESTED_EVENT = new Event("courtDetailsRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COURTMODIFIED_EVENT = new Event("courtModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FACILITYDETAILSREQUESTED_EVENT = new Event("facilityDetailsRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SPORTFACILITYADDED_EVENT = new Event("sportFacilityAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SPORTFACILITYDELETED_EVENT = new Event("sportFacilityDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SPORTFACILITYMODIFIED_EVENT = new Event("sportFacilityModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERADDED_EVENT = new Event("userAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDELETED_EVENT = new Event("userDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SportFacility(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SportFacility(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SportFacility(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SportFacility(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AnnouncementAddedEventResponse> getAnnouncementAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTADDED_EVENT, transactionReceipt);
        ArrayList<AnnouncementAddedEventResponse> responses = new ArrayList<AnnouncementAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementAddedEventResponse typedResponse = new AnnouncementAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementAddedEventResponse getAnnouncementAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTADDED_EVENT, log);
        AnnouncementAddedEventResponse typedResponse = new AnnouncementAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementAddedEventResponse> announcementAddedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementAddedEventFromLog(log));
    }

    public Flowable<AnnouncementAddedEventResponse> announcementAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTADDED_EVENT));
        return announcementAddedEventFlowable(filter);
    }

    public static List<AnnouncementDeletedEventResponse> getAnnouncementDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTDELETED_EVENT, transactionReceipt);
        ArrayList<AnnouncementDeletedEventResponse> responses = new ArrayList<AnnouncementDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementDeletedEventResponse typedResponse = new AnnouncementDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementDeletedEventResponse getAnnouncementDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTDELETED_EVENT, log);
        AnnouncementDeletedEventResponse typedResponse = new AnnouncementDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementDeletedEventResponse> announcementDeletedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementDeletedEventFromLog(log));
    }

    public Flowable<AnnouncementDeletedEventResponse> announcementDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTDELETED_EVENT));
        return announcementDeletedEventFlowable(filter);
    }

    public static List<AnnouncementIpfsHashModifiedEventResponse> getAnnouncementIpfsHashModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT, transactionReceipt);
        ArrayList<AnnouncementIpfsHashModifiedEventResponse> responses = new ArrayList<AnnouncementIpfsHashModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementIpfsHashModifiedEventResponse typedResponse = new AnnouncementIpfsHashModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash_ = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementIpfsHashModifiedEventResponse getAnnouncementIpfsHashModifiedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT, log);
        AnnouncementIpfsHashModifiedEventResponse typedResponse = new AnnouncementIpfsHashModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash_ = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementIpfsHashModifiedEventResponse> announcementIpfsHashModifiedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementIpfsHashModifiedEventFromLog(log));
    }

    public Flowable<AnnouncementIpfsHashModifiedEventResponse> announcementIpfsHashModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT));
        return announcementIpfsHashModifiedEventFlowable(filter);
    }

    public static List<AnnouncementRequestedEventResponse> getAnnouncementRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<AnnouncementRequestedEventResponse> responses = new ArrayList<AnnouncementRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementRequestedEventResponse typedResponse = new AnnouncementRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementRequestedEventResponse getAnnouncementRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTREQUESTED_EVENT, log);
        AnnouncementRequestedEventResponse typedResponse = new AnnouncementRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementRequestedEventResponse> announcementRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementRequestedEventFromLog(log));
    }

    public Flowable<AnnouncementRequestedEventResponse> announcementRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTREQUESTED_EVENT));
        return announcementRequestedEventFlowable(filter);
    }

    public static List<AnnouncementTimeModifiedEventResponse> getAnnouncementTimeModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTTIMEMODIFIED_EVENT, transactionReceipt);
        ArrayList<AnnouncementTimeModifiedEventResponse> responses = new ArrayList<AnnouncementTimeModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementTimeModifiedEventResponse typedResponse = new AnnouncementTimeModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime_ = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime_ = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementTimeModifiedEventResponse getAnnouncementTimeModifiedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTTIMEMODIFIED_EVENT, log);
        AnnouncementTimeModifiedEventResponse typedResponse = new AnnouncementTimeModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.startTime_ = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.endTime_ = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementTimeModifiedEventResponse> announcementTimeModifiedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementTimeModifiedEventFromLog(log));
    }

    public Flowable<AnnouncementTimeModifiedEventResponse> announcementTimeModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTTIMEMODIFIED_EVENT));
        return announcementTimeModifiedEventFlowable(filter);
    }

    public static List<CourtAddedEventResponse> getCourtAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COURTADDED_EVENT, transactionReceipt);
        ArrayList<CourtAddedEventResponse> responses = new ArrayList<CourtAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CourtAddedEventResponse typedResponse = new CourtAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.earliestTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.latestTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CourtAddedEventResponse getCourtAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COURTADDED_EVENT, log);
        CourtAddedEventResponse typedResponse = new CourtAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.earliestTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.latestTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<CourtAddedEventResponse> courtAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCourtAddedEventFromLog(log));
    }

    public Flowable<CourtAddedEventResponse> courtAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COURTADDED_EVENT));
        return courtAddedEventFlowable(filter);
    }

    public static List<CourtDeletedEventResponse> getCourtDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COURTDELETED_EVENT, transactionReceipt);
        ArrayList<CourtDeletedEventResponse> responses = new ArrayList<CourtDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CourtDeletedEventResponse typedResponse = new CourtDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CourtDeletedEventResponse getCourtDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COURTDELETED_EVENT, log);
        CourtDeletedEventResponse typedResponse = new CourtDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CourtDeletedEventResponse> courtDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCourtDeletedEventFromLog(log));
    }

    public Flowable<CourtDeletedEventResponse> courtDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COURTDELETED_EVENT));
        return courtDeletedEventFlowable(filter);
    }

    public static List<CourtDetailsRequestedEventResponse> getCourtDetailsRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COURTDETAILSREQUESTED_EVENT, transactionReceipt);
        ArrayList<CourtDetailsRequestedEventResponse> responses = new ArrayList<CourtDetailsRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CourtDetailsRequestedEventResponse typedResponse = new CourtDetailsRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CourtDetailsRequestedEventResponse getCourtDetailsRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COURTDETAILSREQUESTED_EVENT, log);
        CourtDetailsRequestedEventResponse typedResponse = new CourtDetailsRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<CourtDetailsRequestedEventResponse> courtDetailsRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCourtDetailsRequestedEventFromLog(log));
    }

    public Flowable<CourtDetailsRequestedEventResponse> courtDetailsRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COURTDETAILSREQUESTED_EVENT));
        return courtDetailsRequestedEventFlowable(filter);
    }

    public static List<CourtModifiedEventResponse> getCourtModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COURTMODIFIED_EVENT, transactionReceipt);
        ArrayList<CourtModifiedEventResponse> responses = new ArrayList<CourtModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CourtModifiedEventResponse typedResponse = new CourtModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newData = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CourtModifiedEventResponse getCourtModifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COURTMODIFIED_EVENT, log);
        CourtModifiedEventResponse typedResponse = new CourtModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.newData = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<CourtModifiedEventResponse> courtModifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCourtModifiedEventFromLog(log));
    }

    public Flowable<CourtModifiedEventResponse> courtModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COURTMODIFIED_EVENT));
        return courtModifiedEventFlowable(filter);
    }

    public static List<FacilityDetailsRequestedEventResponse> getFacilityDetailsRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(FACILITYDETAILSREQUESTED_EVENT, transactionReceipt);
        ArrayList<FacilityDetailsRequestedEventResponse> responses = new ArrayList<FacilityDetailsRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FacilityDetailsRequestedEventResponse typedResponse = new FacilityDetailsRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static FacilityDetailsRequestedEventResponse getFacilityDetailsRequestedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(FACILITYDETAILSREQUESTED_EVENT, log);
        FacilityDetailsRequestedEventResponse typedResponse = new FacilityDetailsRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<FacilityDetailsRequestedEventResponse> facilityDetailsRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getFacilityDetailsRequestedEventFromLog(log));
    }

    public Flowable<FacilityDetailsRequestedEventResponse> facilityDetailsRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FACILITYDETAILSREQUESTED_EVENT));
        return facilityDetailsRequestedEventFlowable(filter);
    }

    public static List<SportFacilityAddedEventResponse> getSportFacilityAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SPORTFACILITYADDED_EVENT, transactionReceipt);
        ArrayList<SportFacilityAddedEventResponse> responses = new ArrayList<SportFacilityAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SportFacilityAddedEventResponse typedResponse = new SportFacilityAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.Location = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.courts = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SportFacilityAddedEventResponse getSportFacilityAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SPORTFACILITYADDED_EVENT, log);
        SportFacilityAddedEventResponse typedResponse = new SportFacilityAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.Location = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.courts = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<SportFacilityAddedEventResponse> sportFacilityAddedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSportFacilityAddedEventFromLog(log));
    }

    public Flowable<SportFacilityAddedEventResponse> sportFacilityAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPORTFACILITYADDED_EVENT));
        return sportFacilityAddedEventFlowable(filter);
    }

    public static List<SportFacilityDeletedEventResponse> getSportFacilityDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SPORTFACILITYDELETED_EVENT, transactionReceipt);
        ArrayList<SportFacilityDeletedEventResponse> responses = new ArrayList<SportFacilityDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SportFacilityDeletedEventResponse typedResponse = new SportFacilityDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SportFacilityDeletedEventResponse getSportFacilityDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SPORTFACILITYDELETED_EVENT, log);
        SportFacilityDeletedEventResponse typedResponse = new SportFacilityDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<SportFacilityDeletedEventResponse> sportFacilityDeletedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSportFacilityDeletedEventFromLog(log));
    }

    public Flowable<SportFacilityDeletedEventResponse> sportFacilityDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPORTFACILITYDELETED_EVENT));
        return sportFacilityDeletedEventFlowable(filter);
    }

    public static List<SportFacilityModifiedEventResponse> getSportFacilityModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SPORTFACILITYMODIFIED_EVENT, transactionReceipt);
        ArrayList<SportFacilityModifiedEventResponse> responses = new ArrayList<SportFacilityModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SportFacilityModifiedEventResponse typedResponse = new SportFacilityModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SportFacilityModifiedEventResponse getSportFacilityModifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SPORTFACILITYMODIFIED_EVENT, log);
        SportFacilityModifiedEventResponse typedResponse = new SportFacilityModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.newData = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<SportFacilityModifiedEventResponse> sportFacilityModifiedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSportFacilityModifiedEventFromLog(log));
    }

    public Flowable<SportFacilityModifiedEventResponse> sportFacilityModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPORTFACILITYMODIFIED_EVENT));
        return sportFacilityModifiedEventFlowable(filter);
    }

    public static List<UserAddedEventResponse> getUserAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USERADDED_EVENT, transactionReceipt);
        ArrayList<UserAddedEventResponse> responses = new ArrayList<UserAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserAddedEventResponse typedResponse = new UserAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserAddedEventResponse getUserAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERADDED_EVENT, log);
        UserAddedEventResponse typedResponse = new UserAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UserAddedEventResponse> userAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserAddedEventFromLog(log));
    }

    public Flowable<UserAddedEventResponse> userAddedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERADDED_EVENT));
        return userAddedEventFlowable(filter);
    }

    public static List<UserDeletedEventResponse> getUserDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USERDELETED_EVENT, transactionReceipt);
        ArrayList<UserDeletedEventResponse> responses = new ArrayList<UserDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserDeletedEventResponse getUserDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERDELETED_EVENT, log);
        UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserDeletedEventFromLog(log));
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDELETED_EVENT));
        return userDeletedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addAnnouncement(String ipfsHash,
            BigInteger startTime, BigInteger endTime) {
        final Function function = new Function(
                FUNC_ADDANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addCourt(String fname, court newCourt) {
        final Function function = new Function(
                FUNC_ADDCOURT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                newCourt), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSportFacility(String fname, String flocation,
            BigInteger fstatus, List<court> fcourts) {
        final Function function = new Function(
                FUNC_ADDSPORTFACILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(flocation), 
                new org.web3j.abi.datatypes.generated.Uint8(fstatus), 
                new org.web3j.abi.datatypes.DynamicArray<court>(court.class, fcourts)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String user) {
        final Function function = new Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAnnouncement(String ipfsHash) {
        final Function function = new Function(
                FUNC_DELETEANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteCourt(String fname, String cname) {
        final Function function = new Function(
                FUNC_DELETECOURT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteSportFacility(String fname) {
        final Function function = new Function(
                FUNC_DELETESPORTFACILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(String user) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllCourts(String fname) {
        final Function function = new Function(
                FUNC_GETALLCOURTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllCourts_(String fname) {
        final Function function = new Function(
                FUNC_GETALLCOURTS_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllSportFacility(String fname) {
        final Function function = new Function(
                FUNC_GETALLSPORTFACILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllSportFacility_(String fname) {
        final Function function = new Function(
                FUNC_GETALLSPORTFACILITY_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAnnouncement(String ipfsHash) {
        final Function function = new Function(
                FUNC_GETANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAvailableTimeRange(String fname,
            String cname) {
        final Function function = new Function(
                FUNC_GETAVAILABLETIMERANGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAvailableTimeRange_(String fname,
            String cname) {
        final Function function = new Function(
                FUNC_GETAVAILABLETIMERANGE_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getCourt(String fname, String cname) {
        final Function function = new Function(
                FUNC_GETCOURT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getCourt_(String fname, String cname) {
        final Function function = new Function(
                FUNC_GETCOURT_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getFacilityLocation(String fname) {
        final Function function = new Function(
                FUNC_GETFACILITYLOCATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAnnouncementIpfsHash(String ipfsHash_,
            String ipfsHash) {
        final Function function = new Function(
                FUNC_UPDATEANNOUNCEMENTIPFSHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash_), 
                new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAnnouncementTime(String ipfsHash,
            BigInteger startTime, BigInteger endTime) {
        final Function function = new Function(
                FUNC_UPDATEANNOUNCEMENTTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCourtName(String fname, String cname_,
            String cname) {
        final Function function = new Function(
                FUNC_UPDATECOURTNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname_), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCourtStatus(String fname, String cname,
            BigInteger cstatus) {
        final Function function = new Function(
                FUNC_UPDATECOURTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname), 
                new org.web3j.abi.datatypes.generated.Uint8(cstatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCourtTime(String fname, String cname,
            BigInteger earliestTime, BigInteger latestTime) {
        final Function function = new Function(
                FUNC_UPDATECOURTTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname), 
                new org.web3j.abi.datatypes.generated.Uint256(earliestTime), 
                new org.web3j.abi.datatypes.generated.Uint256(latestTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSportFacilityLocation(String fname,
            String flocation) {
        final Function function = new Function(
                FUNC_UPDATESPORTFACILITYLOCATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(flocation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSportFacilityName(String fname_,
            String fname) {
        final Function function = new Function(
                FUNC_UPDATESPORTFACILITYNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname_), 
                new org.web3j.abi.datatypes.Utf8String(fname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSportFacilityStatus(String fname,
            BigInteger fstatus) {
        final Function function = new Function(
                FUNC_UPDATESPORTFACILITYSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.generated.Uint8(fstatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SportFacility load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new SportFacility(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SportFacility load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SportFacility(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SportFacility load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new SportFacility(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SportFacility load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SportFacility(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SportFacility> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String admin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin)));
        return deployRemoteCall(SportFacility.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<SportFacility> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String admin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin)));
        return deployRemoteCall(SportFacility.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SportFacility> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String admin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin)));
        return deployRemoteCall(SportFacility.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SportFacility> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String admin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin)));
        return deployRemoteCall(SportFacility.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class court extends DynamicStruct {
        public String name;

        public BigInteger earliestTime;

        public BigInteger latestTime;

        public BigInteger status;

        public court(String name, BigInteger earliestTime, BigInteger latestTime,
                BigInteger status) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(earliestTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(latestTime), 
                    new org.web3j.abi.datatypes.generated.Uint8(status));
            this.name = name;
            this.earliestTime = earliestTime;
            this.latestTime = latestTime;
            this.status = status;
        }

        public court(Utf8String name, Uint256 earliestTime, Uint256 latestTime, Uint8 status) {
            super(name, earliestTime, latestTime, status);
            this.name = name.getValue();
            this.earliestTime = earliestTime.getValue();
            this.latestTime = latestTime.getValue();
            this.status = status.getValue();
        }
    }

    public static class Announcement extends DynamicStruct {
        public String ipfsHash;

        public BigInteger startTime;

        public BigInteger endTime;

        public Announcement(String ipfsHash, BigInteger startTime, BigInteger endTime) {
            super(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                    new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(endTime));
            this.ipfsHash = ipfsHash;
            this.startTime = startTime;
            this.endTime = endTime;
        }

        public Announcement(Utf8String ipfsHash, Uint256 startTime, Uint256 endTime) {
            super(ipfsHash, startTime, endTime);
            this.ipfsHash = ipfsHash.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
        }
    }

    public static class AnnouncementAddedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger timestamp;
    }

    public static class AnnouncementDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementIpfsHashModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash_;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementTimeModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger startTime_;

        public BigInteger endTime_;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger timestamp;
    }

    public static class CourtAddedEventResponse extends BaseEventResponse {
        public String from;

        public String courtName;

        public BigInteger earliestTime;

        public BigInteger latestTime;

        public String status;

        public BigInteger timestamp;
    }

    public static class CourtDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String courtName;

        public BigInteger timestamp;
    }

    public static class CourtDetailsRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String courtName;

        public String note;

        public BigInteger timestamp;
    }

    public static class CourtModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String courtName;

        public String oldData;

        public String newData;

        public BigInteger timestamp;
    }

    public static class FacilityDetailsRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String note;

        public BigInteger timestamp;
    }

    public static class SportFacilityAddedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String Location;

        public String status;

        public String courts;

        public BigInteger timestamp;
    }

    public static class SportFacilityDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public BigInteger timestamp;
    }

    public static class SportFacilityModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String oldData;

        public String newData;

        public BigInteger timestamp;
    }

    public static class UserAddedEventResponse extends BaseEventResponse {
        public String from;

        public String user;

        public BigInteger timestamp;
    }

    public static class UserDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String user;

        public String note;

        public BigInteger timestamp;
    }
}
