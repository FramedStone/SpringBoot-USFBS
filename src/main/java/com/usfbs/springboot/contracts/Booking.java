package com.usfbs.springboot.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.14.0.
 */
@SuppressWarnings("rawtypes")
public class Booking extends Contract {
    public static final String BINARY = "60e06040523480156200001157600080fd5b50604051620043233803806200432383398101604081905262000034916200006e565b6001600160a01b03918216608081905260a0521660c052620000a6565b80516001600160a01b03811681146200006957600080fd5b919050565b600080604083850312156200008257600080fd5b6200008d8362000051565b91506200009d6020840162000051565b90509250929050565b60805160a05160c051614203620001206000396000612df0015260005050600081816105b3015281816106d5015281816107e201528181610d16015281816111670152818161128b01528181611835015281816118a501528181611a8101528181611c7a015281816127590152612dae01526142036000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635c60f226116100a25780639739ad5f116100715780639739ad5f1461021d578063b3ee93fc14610230578063b91316dd14610243578063ba2992b814610263578063c2c3fbee1461028457600080fd5b80635c60f226146101c45780636a5c841a146101d75780637af674e1146101f7578063931431ea1461020a57600080fd5b8063421b2d8b116100de578063421b2d8b146101815780634245f2fe1461019457806350651f68146101a957806350bcf4a5146101b157600080fd5b80630dca825e146101105780631ed87304146101255780632100c3df1461014e5780632b6c588d1461016e575b600080fd5b61012361011e3660046132c9565b610297565b005b6101386101333660046133ae565b610422565b6040516101459190613433565b60405180910390f35b61016161015c36600461346f565b6105a6565b60405161014591906134b6565b61012361017c3660046133ae565b6106ca565b61012361018f3660046134c9565b6107d7565b61019c61087d565b60405161014591906135de565b61019c610d09565b6101236101bf36600461346f565b61115c565b6101236101d23660046134c9565b611280565b6101ea6101e53660046132c9565b611407565b6040516101459190613640565b6101ea6102053660046132c9565b611822565b610123610218366004613653565b61189a565b61012361022b3660046136a1565b611a76565b61012361023e366004613653565b611c6f565b6102566102513660046136a1565b611e71565b60405161014591906136fb565b610276610271366004613752565b61210b565b604051908152602001610145565b610276610292366004613752565b61274c565b3360009081526001602081905260409091205460ff161515146102d55760405162461bcd60e51b81526004016102cc90613830565b60405180910390fd5b6102dd612948565b806000036103265760405162461bcd60e51b8152602060048201526016602482015275109bdbdada5b99d259081b9bdd081c1c9bdd9a59195960521b60448201526064016102cc565b336001600160a01b03166002828154811061034357610343613857565b60009182526020909120600990910201546001600160a01b03161461039e5760405162461bcd60e51b81526020600482015260116024820152702737ba103137b7b5b4b7339037bbb732b960791b60448201526064016102cc565b6000600282815481106103b3576103b3613857565b6000918252602082206008600990920201908101549092506103d79060ff16612be1565b905060006103e56004612be1565b9050336001600160a01b03166000805160206141ae83398151915285848442604051610414949392919061386d565b60405180910390a250505050565b61044660405180606001604052806060815260200160008152602001600081525090565b60008260405161045691906138df565b9081526040519081900360200190208054610470906138fb565b90506000036104915760405162461bcd60e51b81526004016102cc90613935565b600080836040516104a291906138df565b90815260200160405180910390206040518060600160405290816000820180546104cb906138fb565b80601f01602080910402602001604051908101604052809291908181526020018280546104f7906138fb565b80156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b5050509183525050600182015460208201526002909101546040918201528151905191925033917fcd89f8003d5c5810477a5f9f6a603ee6803e738898ae8928844766c87efbbf6d91610598914290613965565b60405180910390a292915050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f05760405162461bcd60e51b81526004016102cc90613830565b6105f8612948565b826000036106185760405162461bcd60e51b81526004016102cc90613987565b60006002848154811061062d5761062d613857565b90600052602060002090600902019050336001600160a01b03166000805160206141ae833981519152856106718460080160009054906101000a900460ff16612be1565b61067b6002612be1565b8760405160200161068c91906139b2565b60408051601f19818403018152908290526106ab9493929142906139f7565b60405180910390a2600801805460ff1916600217905550805b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107125760405162461bcd60e51b81526004016102cc90613830565b60008160405161072291906138df565b908152604051908190036020019020805461073c906138fb565b905060000361075d5760405162461bcd60e51b81526004016102cc90613935565b60008160405161076d91906138df565b9081526040519081900360200190206000610788828261320e565b5060006001820181905560029091015560405133907f7e5f432f0a4cebe76f981268147421b4fe4d869322e486ddcf97817cf0bf608d906107cc9084904290613965565b60405180910390a250565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461081f5760405162461bcd60e51b81526004016102cc90613830565b6001600160a01b038116600081815260016020818152604092839020805460ff1916909217909155905142815233917f8af55b0f4d8e2cbaeef69c06f910b016a57b3807c1f854de7ec4881ed83b3d7c91015b60405180910390a350565b3360009081526001602081905260409091205460609160ff9091161515146108b75760405162461bcd60e51b81526004016102cc90613830565b6108bf612948565b6002546109195760405162461bcd60e51b815260206004820152602260248201527f456d70747920626f6f6b696e677320666f756e6420696e20626c6f636b63686160448201526134b760f11b60648201526084016102cc565b606060005b600254811015610d0357336001600160a01b03166002828154811061094557610945613857565b60009182526020909120600990910201546001600160a01b031603610cf1576002818154811061097757610977613857565b9060005260206000209060090201604051806101000160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820180546109da906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a06906138fb565b8015610a535780601f10610a2857610100808354040283529160200191610a53565b820191906000526020600020905b815481529060010190602001808311610a3657829003601f168201915b50505050508152602001600382018054610a6c906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610a98906138fb565b8015610ae55780601f10610aba57610100808354040283529160200191610ae5565b820191906000526020600020905b815481529060010190602001808311610ac857829003601f168201915b50505050508152602001600482018054610afe906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2a906138fb565b8015610b775780601f10610b4c57610100808354040283529160200191610b77565b820191906000526020600020905b815481529060010190602001808311610b5a57829003601f168201915b50505050508152602001600582018054610b90906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbc906138fb565b8015610c095780601f10610bde57610100808354040283529160200191610c09565b820191906000526020600020905b815481529060010190602001808311610bec57829003601f168201915b5050509183525050604080518082018252600684015481526007840154602082810191909152830152600883015491019060ff166004811115610c4e57610c4e6134f2565b6004811115610c5f57610c5f6134f2565b81525050828281518110610c7557610c75613857565b6020026020010181905250336001600160a01b03167f64df44eecc1bed90d6a3864b17823ab230cf5ee70bb412a3f7e526b1901b252760028381548110610cbe57610cbe613857565b90600052602060002090600902016001015442604051610ce8929190918252602082015260400190565b60405180910390a25b80610cfb81613a5f565b91505061091e565b50905090565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d535760405162461bcd60e51b81526004016102cc90613830565b610d5b612948565b600254610db55760405162461bcd60e51b815260206004820152602260248201527f456d70747920626f6f6b696e677320736176656420696e20626c6f636b63686160448201526134b760f11b60648201526084016102cc565b60005b600254811015610e4457336001600160a01b03167f64df44eecc1bed90d6a3864b17823ab230cf5ee70bb412a3f7e526b1901b252760028381548110610e0057610e00613857565b90600052602060002090600902016001015442604051610e2a929190918252602082015260400190565b60405180910390a280610e3c81613a5f565b915050610db8565b506002805480602002602001604051908101604052809291908181526020016000905b8282101561115357600084815260209081902060408051610100810182526009860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191610ebb906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee7906138fb565b8015610f345780601f10610f0957610100808354040283529160200191610f34565b820191906000526020600020905b815481529060010190602001808311610f1757829003601f168201915b50505050508152602001600382018054610f4d906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054610f79906138fb565b8015610fc65780601f10610f9b57610100808354040283529160200191610fc6565b820191906000526020600020905b815481529060010190602001808311610fa957829003601f168201915b50505050508152602001600482018054610fdf906138fb565b80601f016020809104026020016040519081016040528092919081815260200182805461100b906138fb565b80156110585780601f1061102d57610100808354040283529160200191611058565b820191906000526020600020905b81548152906001019060200180831161103b57829003601f168201915b50505050508152602001600582018054611071906138fb565b80601f016020809104026020016040519081016040528092919081815260200182805461109d906138fb565b80156110ea5780601f106110bf576101008083540402835291602001916110ea565b820191906000526020600020905b8154815290600101906020018083116110cd57829003601f168201915b5050509183525050604080518082018252600684015481526007840154602082810191909152830152600883015491019060ff16600481111561112f5761112f6134f2565b6004811115611140576111406134f2565b8152505081526020019060010190610e67565b50505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111a45760405162461bcd60e51b81526004016102cc90613830565b6111ac612948565b816000036111cc5760405162461bcd60e51b81526004016102cc90613987565b80516000036112115760405162461bcd60e51b81526020600482015260116024820152701b9bdd19481b9bdd081c1c9bdd9a591959607a1b60448201526064016102cc565b60006002838154811061122657611226613857565b90600052602060002090600902019050818160050190816112479190613ac7565b50336001600160a01b03166000805160206141ae83398151915284844260405161127393929190613b87565b60405180910390a2505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112c85760405162461bcd60e51b81526004016102cc90613830565b6001600160a01b03811660009081526001602081905260409091205460ff161515146113365760405162461bcd60e51b815260206004820152601760248201527f55736572206e6f7420666f756e64202873797374656d2900000000000000000060448201526064016102cc565b336001600160a01b038216036113875760405162461bcd60e51b81526020600482015260166024820152754163636573732064656e696564202873797374656d2960501b60448201526064016102cc565b6001600160a01b038116600081815260016020908152604091829020805460ff19169055815182815260149281019290925273557365722072656d6f766564202861646d696e2960601b6060830152429082015233907ffa65fb89220eec84b1ada4d079a06ae008c52f053e2fbfc171d8196e4b9abddd90608001610872565b61140f613248565b3360009081526001602081905260409091205460ff161515146114445760405162461bcd60e51b81526004016102cc90613830565b61144c612948565b8160000361146c5760405162461bcd60e51b81526004016102cc90613987565b336001600160a01b03166002838154811061148957611489613857565b60009182526020909120600990910201546001600160a01b0316146114e45760405162461bcd60e51b81526020600482015260116024820152702737ba103137b7b5b4b7339037bbb732b960791b60448201526064016102cc565b6040805183815242602082015233917f64df44eecc1bed90d6a3864b17823ab230cf5ee70bb412a3f7e526b1901b2527910160405180910390a26002828154811061153157611531613857565b9060005260206000209060090201604051806101000160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282018054611594906138fb565b80601f01602080910402602001604051908101604052809291908181526020018280546115c0906138fb565b801561160d5780601f106115e25761010080835404028352916020019161160d565b820191906000526020600020905b8154815290600101906020018083116115f057829003601f168201915b50505050508152602001600382018054611626906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054611652906138fb565b801561169f5780601f106116745761010080835404028352916020019161169f565b820191906000526020600020905b81548152906001019060200180831161168257829003601f168201915b505050505081526020016004820180546116b8906138fb565b80601f01602080910402602001604051908101604052809291908181526020018280546116e4906138fb565b80156117315780601f1061170657610100808354040283529160200191611731565b820191906000526020600020905b81548152906001019060200180831161171457829003601f168201915b5050505050815260200160058201805461174a906138fb565b80601f0160208091040260200160405190810160405280929190818152602001828054611776906138fb565b80156117c35780601f10611798576101008083540402835291602001916117c3565b820191906000526020600020905b8154815290600101906020018083116117a657829003601f168201915b5050509183525050604080518082018252600684015481526007840154602082810191909152830152600883015491019060ff166004811115611808576118086134f2565b6004811115611819576118196134f2565b90525092915050565b61182a613248565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118725760405162461bcd60e51b81526004016102cc90613830565b61187a612948565b816000036114e45760405162461bcd60e51b81526004016102cc90613987565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118e25760405162461bcd60e51b81526004016102cc90613830565b6000836040516118f291906138df565b908152604051908190036020019020805461190c906138fb565b1590506119515760405162461bcd60e51b8152602060048201526013602482015272088eae0d8d2c6c2e8cac840d2e0cce690c2e6d606b1b60448201526064016102cc565b8160000361199a5760405162461bcd60e51b81526020600482015260166024820152751cdd185c9d151a5b59481b9bdd081c1c9bdd9a59195960521b60448201526064016102cc565b806000036119e15760405162461bcd60e51b8152602060048201526014602482015273195b99151a5b59481b9bdd081c1c9bdd9a59195960621b60448201526064016102cc565b604051806060016040528084815260200183815260200182815250600084604051611a0c91906138df565b90815260405190819003602001902081518190611a299082613ac7565b50602082015160018201556040918201516002909101555133907f49a4e12bfea796ddfee159f7d8552825d60cea59ab6ea03f43431bfb474b79a390611273908690869086904290613bec565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611abe5760405162461bcd60e51b81526004016102cc90613830565b600082604051611ace91906138df565b9081526040519081900360200190208054611ae8906138fb565b9050600003611b095760405162461bcd60e51b81526004016102cc90613935565b8051600003611b525760405162461bcd60e51b81526020600482015260156024820152741a5c199cd2185cda081b9bdd081c1c9bdd9a591959605a1b60448201526064016102cc565b6040518060600160405280828152602001600084604051611b7391906138df565b9081526020016040518091039020600101548152602001600084604051611b9a91906138df565b908152602001604051809103902060020154815250600082604051611bbf91906138df565b90815260405190819003602001902081518190611bdc9082613ac7565b506020820151600182015560409182015160029091015551600090611c029084906138df565b9081526040519081900360200190206000611c1d828261320e565b5060006001820181905560029091015560405133907f748e0cf6928a9d4807ef9076c5befa6090e9dd72cc44f78bc0858726e675cf4f90611c6390859085904290613c1b565b60405180910390a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611cb75760405162461bcd60e51b81526004016102cc90613830565b600083604051611cc791906138df565b9081526040519081900360200190208054611ce1906138fb565b9050600003611d025760405162461bcd60e51b81526004016102cc90613935565b81600003611d4b5760405162461bcd60e51b81526020600482015260166024820152751cdd185c9d151a5b59481b9bdd081c1c9bdd9a59195960521b60448201526064016102cc565b80600003611d925760405162461bcd60e51b8152602060048201526014602482015273195b99151a5b59481b9bdd081c1c9bdd9a59195960621b60448201526064016102cc565b60008084604051611da391906138df565b908152602001604051809103902060010154905060008085604051611dc891906138df565b908152602001604051809103902060020154905083600086604051611ded91906138df565b90815260200160405180910390206001018190555082600086604051611e1391906138df565b9081526040519081900360200181206002019190915533907fcf919766b203e7636b2f7d99b6c4fd24957448dd84e095089b465af12fd6c85190611e62908890869086908a908a904290613c51565b60405180910390a25050505050565b6060611e7b612948565b6000835111611e9c5760405162461bcd60e51b81526004016102cc90613c8d565b6000825111611ebd5760405162461bcd60e51b81526004016102cc90613cc4565b60025460009067ffffffffffffffff811115611edb57611edb6132e2565b604051908082528060200260200182016040528015611f2057816020015b6040805180820190915260008082526020820152815260200190600190039081611ef95790505b50905060005b60025481101561210357848051906020012060028281548110611f4b57611f4b613857565b9060005260206000209060090201600301604051611f699190613cfb565b6040518091039020148015611fbc5750838051906020012060028281548110611f9457611f94613857565b9060005260206000209060090201600401604051611fb29190613cfb565b6040518091039020145b80156120465750600060028281548110611fd857611fd8613857565b600091825260209091206008600990920201015460ff166004811115612000576120006134f2565b1480612046575060016002828154811061201c5761201c613857565b600091825260209091206008600990920201015460ff166004811115612044576120446134f2565b145b156120f1576002818154811061205e5761205e613857565b9060005260206000209060090201600601604051806040016040529081600082015481526020016001820154815250508282815181106120a0576120a0613857565b6020026020010181905250336001600160a01b03167f64a77e8e5a89f92fd3d976f866f08544009bc92cc4bdc1793d994c9321a308ad8686426040516120e893929190613c1b565b60405180910390a25b806120fb81613a5f565b915050611f26565b509392505050565b33600090815260016020819052604082205460ff1615151461213f5760405162461bcd60e51b81526004016102cc90613830565b612147612948565b60008551116121685760405162461bcd60e51b81526004016102cc90613c8d565b60008451116121895760405162461bcd60e51b81526004016102cc90613cc4565b81511580159061219c5750602082015115155b6121e85760405162461bcd60e51b815260206004820152601e60248201527f5374617274206f7220456e642074696d65206e6f742070726f7669646564000060448201526064016102cc565b815160208301516000916121fb91613d71565b905080610e10148061220e575080611c20145b6122715760405162461bcd60e51b815260206004820152602e60248201527f426f6f6b696e67206d7573742062652065786163746c79203120686f7572206f60448201526d72203220686f757273206f6e6c7960901b60648201526084016102cc565b60025460005b6002548110156122fe576002818154811061229457612294613857565b90600052602060002090600902016001015460001480156122e35750600281815481106122c3576122c3613857565b906000526020600020906009020160020180546122df906138fb565b1590505b156122ec578091505b806122f681613a5f565b915050612277565b506000604051806101000160405280336001600160a01b031681526020018381526020018a815260200189815260200188815260200187815260200186815260200160016004811115612353576123536134f2565b90526002805460018101825560009190915281517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600990920291820180546001600160a01b0319166001600160a01b0390921691909117815560208301517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf8301556040830151929350839290917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0019061240f9082613ac7565b50606082015160038201906124249082613ac7565b50608082015160048201906124399082613ac7565b5060a0820151600582019061244e9082613ac7565b5060c08201518051600683015560200151600782015560e082015160088201805460ff19166001836004811115612487576124876134f2565b02179055505033600090815260036020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015183925060028201906124db9082613ac7565b50606082015160038201906124f09082613ac7565b50608082015160048201906125059082613ac7565b5060a0820151600582019061251a9082613ac7565b5060c08201518051600683015560200151600782015560e082015160088201805460ff19166001836004811115612553576125536134f2565b021790555090505060016002838154811061257057612570613857565b60009182526020909120600860099092020101805460ff1916600183600481111561259d5761259d6134f2565b0217905550336001600160a01b03167fb5b77e81863bdbbd0d5921bd76bc0f42cae6de4468773464734a6d4f0a822cad838b8b8b6125de8b60000151612d38565b6125eb8c60200151612d38565b6125f56001612be1565b4260405161260a989796959493929190613d84565b60405180910390a261261d888887612da1565b156126ac5760006002838154811061263757612637613857565b60009182526020909120600860099092020101805460ff19166001836004811115612664576126646134f2565b0217905550336000805160206141ae833981519152836126846001612be1565b61268e6000612be1565b4260405161269f9493929190613e51565b60405180910390a2612740565b6126b7888887612da1565b6127405760028083815481106126cf576126cf613857565b60009182526020909120600860099092020101805460ff191660018360048111156126fc576126fc6134f2565b0217905550336000805160206141ae8339815191528361271c6001612be1565b6127266002612be1565b426040516127379493929190613ec3565b60405180910390a25b50979650505050505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146127965760405162461bcd60e51b81526004016102cc90613830565b61279e612948565b60008551116127bf5760405162461bcd60e51b81526004016102cc90613c8d565b60008451116127e05760405162461bcd60e51b81526004016102cc90613cc4565b8151158015906127f35750602082015115155b61283f5760405162461bcd60e51b815260206004820152601e60248201527f5374617274206f7220456e642074696d65206e6f742070726f7669646564000060448201526064016102cc565b8151602083015160009161285291613d71565b9050612860610e1082613f61565b156128bb5760405162461bcd60e51b815260206004820152602560248201527f4475726174696f6e206d75737420626520696e203120686f757220696e6372656044820152646d656e747360d81b60648201526084016102cc565b60025460005b6002548110156122fe57600281815481106128de576128de613857565b906000526020600020906009020160010154600014801561292d57506002818154811061290d5761290d613857565b90600052602060002090600902016002018054612929906138fb565b1590505b15612936578091505b8061294081613a5f565b9150506128c1565b60005b600254811015612bde5760006002828154811061296a5761296a613857565b60009182526020822060099091020191506002838154811061298e5761298e613857565b600091825260209091206008600990920201015460ff1660048111156129b6576129b66134f2565b03612a265760078101544210612a215760088101805460ff19166003179055600181015433906000805160206141ae833981519152906129f66000612be1565b6008850154612a079060ff16612be1565b42604051612a189493929190613f75565b60405180910390a25b612bcb565b600460028381548110612a3b57612a3b613857565b600091825260209091206008600990920201015460ff166004811115612a6357612a636134f2565b03612bcb576001810154600882015433917f46a076b997ff518755813dfc98f4404b0b3b6ef5661f4f13e199917c6b01db96916002850190612aa79060ff16612be1565b42604051612ab89493929190613ff8565b60405180910390a260028281548110612ad357612ad3613857565b60009182526020822060099091020180546001600160a01b03191681556001810182905590612b05600283018261320e565b612b1360038301600061320e565b612b2160048301600061320e565b612b2f60058301600061320e565b50600060068201819055600782018190556008909101805460ff1916905581546001600160a01b0316815260036020526040812080546001600160a01b03191681556001810182905590612b86600283018261320e565b612b9460038301600061320e565b612ba260048301600061320e565b612bb060058301600061320e565b506000600682018190556007820155600801805460ff191690555b5080612bd681613a5f565b91505061294b565b50565b60606000826004811115612bf757612bf76134f2565b03612c20575050604080518082019091526008815267185c1c1c9bdd995960c21b602082015290565b6001826004811115612c3457612c346134f2565b03612c5c57505060408051808201909152600781526670656e64696e6760c81b602082015290565b6002826004811115612c7057612c706134f2565b03612c995750506040805180820190915260088152671c995a9958dd195960c21b602082015290565b6003826004811115612cad57612cad6134f2565b03612cd757505060408051808201909152600981526818dbdb5c1b195d195960ba1b602082015290565b6004826004811115612ceb57612ceb6134f2565b03612d1557505060408051808201909152600981526818d85b98d95b1b195960ba1b602082015290565b50506040805180820190915260078152663ab735b737bbb760c91b602082015290565b60606000612d48610e10846140cf565b90506000603c612d5a610e1086613f61565b612d6491906140cf565b9050612d6f826130c5565b612d78826130c5565b604051602001612d899291906140e3565b60405160208183030381529060405292505050919050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612deb5760405162461bcd60e51b81526004016102cc90613830565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634183530287876040518363ffffffff1660e01b8152600401612e3c92919061411f565b60408051808303816000875af1158015612e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7e919061414d565b9150915081846000015110158015612e9a575080846020015111155b612efa5760405162461bcd60e51b815260206004820152602b60248201527f426f6f6b696e672072657175657374206e6f742077697468696e20636f75727460448201526a2074696d652072616e676560a81b60648201526084016102cc565b60005b6002548110156130b657868051906020012060028281548110612f2257612f22613857565b9060005260206000209060090201600301604051612f409190613cfb565b6040518091039020148015612f935750858051906020012060028281548110612f6b57612f6b613857565b9060005260206000209060090201600401604051612f899190613cfb565b6040518091039020145b8015612fc8575084516002805483908110612fb057612fb0613857565b90600052602060002090600902016006016000015410155b8015612fff5750846020015160028281548110612fe757612fe7613857565b90600052602060002090600902016006016001015411155b156130a45760006002828154811061301957613019613857565b600091825260209091206008600990920201015460ff166004811115613041576130416134f2565b1480613087575060016002828154811061305d5761305d613857565b600091825260209091206008600990920201015460ff166004811115613085576130856134f2565b145b1561309857600093505050506130be565b600193505050506130be565b806130ae81613a5f565b915050612efd565b506001925050505b9392505050565b606060006130d283613105565b9050600a8310156106c457806040516020016130ee9190614171565b604051602081830303815290604052915050919050565b60608160000361312c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613156578061314081613a5f565b915061314f9050600a836140cf565b9150613130565b60008167ffffffffffffffff811115613171576131716132e2565b6040519080825280601f01601f19166020018201604052801561319b576020820181803683370190505b5090505b8415613206576131b0600183613d71565b91506131bd600a86613f61565b6131c890603061419a565b60f81b8183815181106131dd576131dd613857565b60200101906001600160f81b031916908160001a9053506131ff600a866140cf565b945061319f565b949350505050565b50805461321a906138fb565b6000825580601f1061322a575050565b601f016020900490600052602060002090810190612bde91906132b0565b60405180610100016040528060006001600160a01b0316815260200160008152602001606081526020016060815260200160608152602001606081526020016132a4604051806040016040528060008152602001600081525090565b81526020016000905290565b5b808211156132c557600081556001016132b1565b5090565b6000602082840312156132db57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561331b5761331b6132e2565b60405290565b600082601f83011261333257600080fd5b813567ffffffffffffffff8082111561334d5761334d6132e2565b604051601f8301601f19908116603f01168101908282118183101715613375576133756132e2565b8160405283815286602085880101111561338e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156133c057600080fd5b813567ffffffffffffffff8111156133d757600080fd5b61320684828501613321565b60005b838110156133fe5781810151838201526020016133e6565b50506000910152565b6000815180845261341f8160208601602086016133e3565b601f01601f19169290920160200192915050565b60208152600082516060602084015261344f6080840182613407565b905060208401516040840152604084015160608401528091505092915050565b6000806040838503121561348257600080fd5b82359150602083013567ffffffffffffffff8111156134a057600080fd5b6134ac85828601613321565b9150509250929050565b6020815260006130be6020830184613407565b6000602082840312156134db57600080fd5b81356001600160a01b03811681146130be57600080fd5b634e487b7160e01b600052602160045260246000fd5b6005811061352657634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b03168252600061012060208301516020850152604083015181604086015261355d82860182613407565b915050606083015184820360608601526135778282613407565b915050608083015184820360808601526135918282613407565b91505060a083015184820360a08601526135ab8282613407565b91505060c08301516135ca60c086018280518252602090810151910152565b5060e0830151612103610100860182613508565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561363357603f1988860301845261362185835161352a565b94509285019290850190600101613605565b5092979650505050505050565b6020815260006130be602083018461352a565b60008060006060848603121561366857600080fd5b833567ffffffffffffffff81111561367f57600080fd5b61368b86828701613321565b9660208601359650604090950135949350505050565b600080604083850312156136b457600080fd5b823567ffffffffffffffff808211156136cc57600080fd5b6136d886838701613321565b935060208501359150808211156136ee57600080fd5b506134ac85828601613321565b602080825282518282018190526000919060409081850190868401855b828110156137455761373584835180518252602090810151910152565b9284019290850190600101613718565b5091979650505050505050565b600080600080600085870360c081121561376b57600080fd5b863567ffffffffffffffff8082111561378357600080fd5b61378f8a838b01613321565b975060208901359150808211156137a557600080fd5b6137b18a838b01613321565b965060408901359150808211156137c757600080fd5b6137d38a838b01613321565b955060608901359150808211156137e957600080fd5b506137f689828a01613321565b9350506040607f198201121561380b57600080fd5b506138146132f8565b6080870135815260a09096013560208701525092959194509290565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b84815260a06020820152600061388660a0830186613407565b82810360408401526138988186613407565b8381036060850152601981527f426f6f6b696e672063616e63656c6c6564206279207573657200000000000000602082015260809093019390935250604001949350505050565b600082516138f18184602087016133e3565b9190910192915050565b600181811c9082168061390f57607f821691505b60208210810361392f57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260169082015275105b9b9bdd5b98d95b595b9d081b9bdd08199bdd5b9960521b604082015260600190565b6040815260006139786040830185613407565b90508260208301529392505050565b602080825260119082015270109bdbdada5b99c81b9bdd08199bdd5b99607a1b604082015260600190565b7f426f6f6b696e672072656a65637465642062792061646d696e3a2000000000008152600082516139ea81601b8501602087016133e3565b91909101601b0192915050565b85815260a060208201526000613a1060a0830187613407565b8281036040840152613a228187613407565b90508281036060840152613a368186613407565b9150508260808301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201613a7157613a71613a49565b5060010190565b601f821115613ac257600081815260208120601f850160051c81016020861015613a9f5750805b601f850160051c820191505b81811015613abe57828155600101613aab565b5050505b505050565b815167ffffffffffffffff811115613ae157613ae16132e2565b613af581613aef84546138fb565b84613a78565b602080601f831160018114613b2a5760008415613b125750858301515b600019600386901b1c1916600185901b178555613abe565b600085815260208120601f198616915b82811015613b5957888601518255948401946001909101908401613b3a565b5085821015613b775787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b83815260a06020820152600060a082015260c060408201526000613bae60c0830185613407565b828103606084015260168152752737ba329030ba3a30b1b432b210313c9030b236b4b760511b60208201526080909201929092526040019392505050565b608081526000613bff6080830187613407565b6020830195909552506040810192909252606090910152919050565b606081526000613c2e6060830186613407565b8281036020840152613c408186613407565b915050826040830152949350505050565b60c081526000613c6460c0830189613407565b60208301979097525060408101949094526060840192909252608083015260a090910152919050565b6020808252601a908201527f466163696c697479206e616d65206e6f742070726f7669646564000000000000604082015260600190565b60208082526017908201527f436f757274206e616d65206e6f742070726f7669646564000000000000000000604082015260600190565b6000808354613d09816138fb565b60018281168015613d215760018114613d3657613d65565b60ff1984168752821515830287019450613d65565b8760005260208060002060005b85811015613d5c5781548a820152908401908201613d43565b50505082870194505b50929695505050505050565b818103818111156106c4576106c4613a49565b60006101208a8352806020840152613d9e8184018b613407565b90508281036040840152613db2818a613407565b90508281036060840152613dc68189613407565b9050828103806080850152601882527f426f6f6b696e6720637265617465642062792061646d696e000000000000000060208301526040810160a085015250613e126040820188613407565b905082810360c0840152613e268187613407565b905082810360e0840152613e3a8186613407565b915050826101008301529998505050505050505050565b84815260a060208201526000613e6a60a0830186613407565b8281036040840152613e7c8186613407565b8381036060850152601a81527f426f6f6b696e6720617070726f7665642062792073797374656d000000000000602082015260809093019390935250604001949350505050565b84815260a060208201526000613edc60a0830186613407565b8281036040840152613eee8186613407565b90508281036060840152602a81527f426f6f6b696e672072656a65637465642062792073797374656d2064756520746020820152696f20636c617368696e6760b01b60408201526060810191505082608083015295945050505050565b634e487b7160e01b600052601260045260246000fd5b600082613f7057613f70613f4b565b500690565b84815260a060208201526000613f8e60a0830186613407565b8281036040840152613fa08186613407565b90508281036060840152602581527f757064617465642062792073797374656d2028626f6f6b696e6720636f6d706c602082015264657465642960d81b60408201526060810191505082608083015295945050505050565b8481526000602060a08184015260008654614012816138fb565b8060a087015260c0600180841660008114614034576001811461404e5761407c565b60ff1985168984015283151560051b89018301955061407c565b8b6000528660002060005b858110156140745781548b8201860152908301908801614059565b8a0184019650505b505050505083810360408501526140938187613407565b8481036060860152601181527064656c657465642062792073797374656d60781b60208201526080909401949094525050604001949350505050565b6000826140de576140de613f4b565b500490565b600083516140f58184602088016133e3565b601d60f91b90830190815283516141138160018401602088016133e3565b01600101949350505050565b6040815260006141326040830185613407565b82810360208401526141448185613407565b95945050505050565b6000806040838503121561416057600080fd5b505080516020909101519092909150565b600360fc1b81526000825161418d8160018501602087016133e3565b9190910160010192915050565b808201808211156106c4576106c4613a4956fe8b32c25b03448fcbf6f97833a25384fec24ae38a9d0a2e3b7b2a91f2bb6c2860a2646970667358221220ff1bc3b6c5ede74b9b012918fe8b8645ae6abb6cb9eddd0ff992ae331ed4efaf64736f6c63430008130033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDANNOUNCEMENT = "addAnnouncement";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_ATTACHBOOKINGNOTE = "attachBookingNote";

    public static final String FUNC_CANCELBOOKING = "cancelBooking";

    public static final String FUNC_CREATEBOOKING = "createBooking";

    public static final String FUNC_CREATEBOOKING_ = "createBooking_";

    public static final String FUNC_DELETEANNOUNCEMENT = "deleteAnnouncement";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_GETALLBOOKINGS = "getAllBookings";

    public static final String FUNC_GETALLBOOKINGS_ = "getAllBookings_";

    public static final String FUNC_GETANNOUNCEMENT = "getAnnouncement";

    public static final String FUNC_GETBOOKEDTIMESLOTS = "getBookedtimeSlots";

    public static final String FUNC_GETBOOKING = "getBooking";

    public static final String FUNC_GETBOOKING_ = "getBooking_";

    public static final String FUNC_REJECTBOOKING = "rejectBooking";

    public static final String FUNC_UPDATEANNOUNCEMENTIPFSHASH = "updateAnnouncementIpfsHash";

    public static final String FUNC_UPDATEANNOUNCEMENTTIME = "updateAnnouncementTime";

    public static final Event ANNOUNCEMENTADDED_EVENT = new Event("announcementAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTDELETED_EVENT = new Event("announcementDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTIPFSHASHMODIFIED_EVENT = new Event("announcementIpfsHashModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTREQUESTED_EVENT = new Event("announcementRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ANNOUNCEMENTTIMEMODIFIED_EVENT = new Event("announcementTimeModified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOOKINGCREATED_EVENT = new Event("bookingCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOOKINGDELETED_EVENT = new Event("bookingDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOOKINGREQUESTED_EVENT = new Event("bookingRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOOKINGUPDATED_EVENT = new Event("bookingUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TIMESLOTREQUESTED_EVENT = new Event("timeSlotRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERADDED_EVENT = new Event("userAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDELETED_EVENT = new Event("userDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Booking(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Booking(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Booking(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Booking(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AnnouncementAddedEventResponse> getAnnouncementAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTADDED_EVENT, transactionReceipt);
        ArrayList<AnnouncementAddedEventResponse> responses = new ArrayList<AnnouncementAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementAddedEventResponse typedResponse = new AnnouncementAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementAddedEventResponse getAnnouncementAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTADDED_EVENT, log);
        AnnouncementAddedEventResponse typedResponse = new AnnouncementAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementAddedEventResponse> announcementAddedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementAddedEventFromLog(log));
    }

    public Flowable<AnnouncementAddedEventResponse> announcementAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTADDED_EVENT));
        return announcementAddedEventFlowable(filter);
    }

    public static List<AnnouncementDeletedEventResponse> getAnnouncementDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTDELETED_EVENT, transactionReceipt);
        ArrayList<AnnouncementDeletedEventResponse> responses = new ArrayList<AnnouncementDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementDeletedEventResponse typedResponse = new AnnouncementDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementDeletedEventResponse getAnnouncementDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTDELETED_EVENT, log);
        AnnouncementDeletedEventResponse typedResponse = new AnnouncementDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementDeletedEventResponse> announcementDeletedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementDeletedEventFromLog(log));
    }

    public Flowable<AnnouncementDeletedEventResponse> announcementDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTDELETED_EVENT));
        return announcementDeletedEventFlowable(filter);
    }

    public static List<AnnouncementIpfsHashModifiedEventResponse> getAnnouncementIpfsHashModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT, transactionReceipt);
        ArrayList<AnnouncementIpfsHashModifiedEventResponse> responses = new ArrayList<AnnouncementIpfsHashModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementIpfsHashModifiedEventResponse typedResponse = new AnnouncementIpfsHashModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash_ = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementIpfsHashModifiedEventResponse getAnnouncementIpfsHashModifiedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT, log);
        AnnouncementIpfsHashModifiedEventResponse typedResponse = new AnnouncementIpfsHashModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash_ = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementIpfsHashModifiedEventResponse> announcementIpfsHashModifiedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementIpfsHashModifiedEventFromLog(log));
    }

    public Flowable<AnnouncementIpfsHashModifiedEventResponse> announcementIpfsHashModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTIPFSHASHMODIFIED_EVENT));
        return announcementIpfsHashModifiedEventFlowable(filter);
    }

    public static List<AnnouncementRequestedEventResponse> getAnnouncementRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTREQUESTED_EVENT, transactionReceipt);
        ArrayList<AnnouncementRequestedEventResponse> responses = new ArrayList<AnnouncementRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementRequestedEventResponse typedResponse = new AnnouncementRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementRequestedEventResponse getAnnouncementRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTREQUESTED_EVENT, log);
        AnnouncementRequestedEventResponse typedResponse = new AnnouncementRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementRequestedEventResponse> announcementRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementRequestedEventFromLog(log));
    }

    public Flowable<AnnouncementRequestedEventResponse> announcementRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTREQUESTED_EVENT));
        return announcementRequestedEventFlowable(filter);
    }

    public static List<AnnouncementTimeModifiedEventResponse> getAnnouncementTimeModifiedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ANNOUNCEMENTTIMEMODIFIED_EVENT, transactionReceipt);
        ArrayList<AnnouncementTimeModifiedEventResponse> responses = new ArrayList<AnnouncementTimeModifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnnouncementTimeModifiedEventResponse typedResponse = new AnnouncementTimeModifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.startTime_ = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.endTime_ = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AnnouncementTimeModifiedEventResponse getAnnouncementTimeModifiedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ANNOUNCEMENTTIMEMODIFIED_EVENT, log);
        AnnouncementTimeModifiedEventResponse typedResponse = new AnnouncementTimeModifiedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.startTime_ = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.endTime_ = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.endTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        return typedResponse;
    }

    public Flowable<AnnouncementTimeModifiedEventResponse> announcementTimeModifiedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAnnouncementTimeModifiedEventFromLog(log));
    }

    public Flowable<AnnouncementTimeModifiedEventResponse> announcementTimeModifiedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANNOUNCEMENTTIMEMODIFIED_EVENT));
        return announcementTimeModifiedEventFlowable(filter);
    }

    public static List<BookingCreatedEventResponse> getBookingCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BOOKINGCREATED_EVENT, transactionReceipt);
        ArrayList<BookingCreatedEventResponse> responses = new ArrayList<BookingCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingCreatedEventResponse typedResponse = new BookingCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.startTime = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.endTime = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BookingCreatedEventResponse getBookingCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BOOKINGCREATED_EVENT, log);
        BookingCreatedEventResponse typedResponse = new BookingCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.startTime = (String) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.endTime = (String) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(7).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
        return typedResponse;
    }

    public Flowable<BookingCreatedEventResponse> bookingCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBookingCreatedEventFromLog(log));
    }

    public Flowable<BookingCreatedEventResponse> bookingCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGCREATED_EVENT));
        return bookingCreatedEventFlowable(filter);
    }

    public static List<BookingDeletedEventResponse> getBookingDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BOOKINGDELETED_EVENT, transactionReceipt);
        ArrayList<BookingDeletedEventResponse> responses = new ArrayList<BookingDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingDeletedEventResponse typedResponse = new BookingDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BookingDeletedEventResponse getBookingDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BOOKINGDELETED_EVENT, log);
        BookingDeletedEventResponse typedResponse = new BookingDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.status = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<BookingDeletedEventResponse> bookingDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBookingDeletedEventFromLog(log));
    }

    public Flowable<BookingDeletedEventResponse> bookingDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGDELETED_EVENT));
        return bookingDeletedEventFlowable(filter);
    }

    public static List<BookingRequestedEventResponse> getBookingRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BOOKINGREQUESTED_EVENT, transactionReceipt);
        ArrayList<BookingRequestedEventResponse> responses = new ArrayList<BookingRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingRequestedEventResponse typedResponse = new BookingRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BookingRequestedEventResponse getBookingRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BOOKINGREQUESTED_EVENT, log);
        BookingRequestedEventResponse typedResponse = new BookingRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BookingRequestedEventResponse> bookingRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBookingRequestedEventFromLog(log));
    }

    public Flowable<BookingRequestedEventResponse> bookingRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGREQUESTED_EVENT));
        return bookingRequestedEventFlowable(filter);
    }

    public static List<BookingUpdatedEventResponse> getBookingUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BOOKINGUPDATED_EVENT, transactionReceipt);
        ArrayList<BookingUpdatedEventResponse> responses = new ArrayList<BookingUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BookingUpdatedEventResponse typedResponse = new BookingUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BookingUpdatedEventResponse getBookingUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BOOKINGUPDATED_EVENT, log);
        BookingUpdatedEventResponse typedResponse = new BookingUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.bookingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.oldData = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.newData = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<BookingUpdatedEventResponse> bookingUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBookingUpdatedEventFromLog(log));
    }

    public Flowable<BookingUpdatedEventResponse> bookingUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOOKINGUPDATED_EVENT));
        return bookingUpdatedEventFlowable(filter);
    }

    public static List<TimeSlotRequestedEventResponse> getTimeSlotRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TIMESLOTREQUESTED_EVENT, transactionReceipt);
        ArrayList<TimeSlotRequestedEventResponse> responses = new ArrayList<TimeSlotRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TimeSlotRequestedEventResponse typedResponse = new TimeSlotRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TimeSlotRequestedEventResponse getTimeSlotRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TIMESLOTREQUESTED_EVENT, log);
        TimeSlotRequestedEventResponse typedResponse = new TimeSlotRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.facilityName = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.courtName = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TimeSlotRequestedEventResponse> timeSlotRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTimeSlotRequestedEventFromLog(log));
    }

    public Flowable<TimeSlotRequestedEventResponse> timeSlotRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TIMESLOTREQUESTED_EVENT));
        return timeSlotRequestedEventFlowable(filter);
    }

    public static List<UserAddedEventResponse> getUserAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USERADDED_EVENT, transactionReceipt);
        ArrayList<UserAddedEventResponse> responses = new ArrayList<UserAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserAddedEventResponse typedResponse = new UserAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserAddedEventResponse getUserAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERADDED_EVENT, log);
        UserAddedEventResponse typedResponse = new UserAddedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UserAddedEventResponse> userAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserAddedEventFromLog(log));
    }

    public Flowable<UserAddedEventResponse> userAddedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERADDED_EVENT));
        return userAddedEventFlowable(filter);
    }

    public static List<UserDeletedEventResponse> getUserDeletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(USERDELETED_EVENT, transactionReceipt);
        ArrayList<UserDeletedEventResponse> responses = new ArrayList<UserDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UserDeletedEventResponse getUserDeletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERDELETED_EVENT, log);
        UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.note = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUserDeletedEventFromLog(log));
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDELETED_EVENT));
        return userDeletedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addAnnouncement(String ipfsHash,
            BigInteger startTime, BigInteger endTime) {
        final Function function = new Function(
                FUNC_ADDANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String user) {
        final Function function = new Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> attachBookingNote(BigInteger bookingId,
            String note) {
        final Function function = new Function(
                FUNC_ATTACHBOOKINGNOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bookingId), 
                new org.web3j.abi.datatypes.Utf8String(note)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelBooking(BigInteger bookingId) {
        final Function function = new Function(
                FUNC_CANCELBOOKING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bookingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createBooking(String ipfsHash, String fname,
            String cname, String note, timeSlot time) {
        final Function function = new Function(
                FUNC_CREATEBOOKING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname), 
                new org.web3j.abi.datatypes.Utf8String(note), 
                time), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createBooking_(String ipfsHash, String fname,
            String cname, String note, timeSlot time) {
        final Function function = new Function(
                FUNC_CREATEBOOKING_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname), 
                new org.web3j.abi.datatypes.Utf8String(note), 
                time), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAnnouncement(String ipfsHash) {
        final Function function = new Function(
                FUNC_DELETEANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(String user) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllBookings() {
        final Function function = new Function(
                FUNC_GETALLBOOKINGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAllBookings_() {
        final Function function = new Function(
                FUNC_GETALLBOOKINGS_, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getAnnouncement(String ipfsHash) {
        final Function function = new Function(
                FUNC_GETANNOUNCEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getBookedtimeSlots(String fname, String cname) {
        final Function function = new Function(
                FUNC_GETBOOKEDTIMESLOTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fname), 
                new org.web3j.abi.datatypes.Utf8String(cname)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getBooking(BigInteger bookingId) {
        final Function function = new Function(
                FUNC_GETBOOKING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bookingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getBooking_(BigInteger bookingId) {
        final Function function = new Function(
                FUNC_GETBOOKING_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bookingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectBooking(BigInteger bookingId,
            String reason) {
        final Function function = new Function(
                FUNC_REJECTBOOKING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bookingId), 
                new org.web3j.abi.datatypes.Utf8String(reason)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAnnouncementIpfsHash(String ipfsHash_,
            String ipfsHash) {
        final Function function = new Function(
                FUNC_UPDATEANNOUNCEMENTIPFSHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash_), 
                new org.web3j.abi.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAnnouncementTime(String ipfsHash,
            BigInteger startTime, BigInteger endTime) {
        final Function function = new Function(
                FUNC_UPDATEANNOUNCEMENTTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                new org.web3j.abi.datatypes.generated.Uint256(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Booking load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Booking(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Booking load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Booking(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Booking load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Booking(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Booking load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Booking(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Booking> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String admin, String sfAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin), 
                new org.web3j.abi.datatypes.Address(160, sfAddress)));
        return deployRemoteCall(Booking.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<Booking> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider, String admin, String sfAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin), 
                new org.web3j.abi.datatypes.Address(160, sfAddress)));
        return deployRemoteCall(Booking.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Booking> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String admin, String sfAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin), 
                new org.web3j.abi.datatypes.Address(160, sfAddress)));
        return deployRemoteCall(Booking.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Booking> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit, String admin, String sfAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, admin), 
                new org.web3j.abi.datatypes.Address(160, sfAddress)));
        return deployRemoteCall(Booking.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class timeSlot extends StaticStruct {
        public BigInteger startTime;

        public BigInteger endTime;

        public timeSlot(BigInteger startTime, BigInteger endTime) {
            super(new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(endTime));
            this.startTime = startTime;
            this.endTime = endTime;
        }

        public timeSlot(Uint256 startTime, Uint256 endTime) {
            super(startTime, endTime);
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
        }
    }

    public static class Announcement extends DynamicStruct {
        public String ipfsHash;

        public BigInteger startTime;

        public BigInteger endTime;

        public Announcement(String ipfsHash, BigInteger startTime, BigInteger endTime) {
            super(new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                    new org.web3j.abi.datatypes.generated.Uint256(startTime), 
                    new org.web3j.abi.datatypes.generated.Uint256(endTime));
            this.ipfsHash = ipfsHash;
            this.startTime = startTime;
            this.endTime = endTime;
        }

        public Announcement(Utf8String ipfsHash, Uint256 startTime, Uint256 endTime) {
            super(ipfsHash, startTime, endTime);
            this.ipfsHash = ipfsHash.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
        }
    }

    public static class bookingTransaction extends DynamicStruct {
        public String owner;

        public BigInteger bookingId;

        public String ipfsHash;

        public String facilityName;

        public String courtName;

        public String note;

        public timeSlot time;

        public BigInteger status;

        public bookingTransaction(String owner, BigInteger bookingId, String ipfsHash,
                String facilityName, String courtName, String note, timeSlot time,
                BigInteger status) {
            super(new org.web3j.abi.datatypes.Address(160, owner), 
                    new org.web3j.abi.datatypes.generated.Uint256(bookingId), 
                    new org.web3j.abi.datatypes.Utf8String(ipfsHash), 
                    new org.web3j.abi.datatypes.Utf8String(facilityName), 
                    new org.web3j.abi.datatypes.Utf8String(courtName), 
                    new org.web3j.abi.datatypes.Utf8String(note), 
                    time, 
                    new org.web3j.abi.datatypes.generated.Uint8(status));
            this.owner = owner;
            this.bookingId = bookingId;
            this.ipfsHash = ipfsHash;
            this.facilityName = facilityName;
            this.courtName = courtName;
            this.note = note;
            this.time = time;
            this.status = status;
        }

        public bookingTransaction(Address owner, Uint256 bookingId, Utf8String ipfsHash,
                Utf8String facilityName, Utf8String courtName, Utf8String note, timeSlot time,
                Uint8 status) {
            super(owner, bookingId, ipfsHash, facilityName, courtName, note, time, status);
            this.owner = owner.getValue();
            this.bookingId = bookingId.getValue();
            this.ipfsHash = ipfsHash.getValue();
            this.facilityName = facilityName.getValue();
            this.courtName = courtName.getValue();
            this.note = note.getValue();
            this.time = time;
            this.status = status.getValue();
        }
    }

    public static class AnnouncementAddedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger timestamp;
    }

    public static class AnnouncementDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementIpfsHashModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash_;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger timestamp;
    }

    public static class AnnouncementTimeModifiedEventResponse extends BaseEventResponse {
        public String from;

        public String ipfsHash;

        public BigInteger startTime_;

        public BigInteger endTime_;

        public BigInteger startTime;

        public BigInteger endTime;

        public BigInteger timestamp;
    }

    public static class BookingCreatedEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger bookingId;

        public String ipfsHash;

        public String facilityName;

        public String courtName;

        public String note;

        public String startTime;

        public String endTime;

        public String status;

        public BigInteger timestamp;
    }

    public static class BookingDeletedEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger bookingId;

        public String ipfsHash;

        public String status;

        public String note;

        public BigInteger timestamp;
    }

    public static class BookingRequestedEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger bookingId;

        public BigInteger timestamp;
    }

    public static class BookingUpdatedEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger bookingId;

        public String oldData;

        public String newData;

        public String note;

        public BigInteger timestamp;
    }

    public static class TimeSlotRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String facilityName;

        public String courtName;

        public BigInteger timestamp;
    }

    public static class UserAddedEventResponse extends BaseEventResponse {
        public String from;

        public String user;

        public BigInteger timestamp;
    }

    public static class UserDeletedEventResponse extends BaseEventResponse {
        public String from;

        public String user;

        public String note;

        public BigInteger timestamp;
    }
}
